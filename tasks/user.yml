---

- name: user | Create local ssh_key_directory for {{ user.name }}
  ansible.builtin.file:
    path: "{{ users_ssh_key_directory }}"
    state: directory
    mode: "0750"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key
  delegate_to: localhost
  become: false

- name: user | Manage user {{ user.name }}
  ansible.builtin.user:
    name: "{{ user.name }}"
    state: "{{ user.state | default('present') }}"
    comment: "{{ user.comment | default(omit) }}"
    create_home: "{{ users_create_home }}"
    password: "{{ user.password | default(omit) }}"
    password_lock: "{{ user.password_lock | default(omit) }}"
    uid: "{{ user.uid | default(omit) }}"
    group: "{{ user.group | default(omit) }}"
    groups: "{{ user.groups | default([]) | join(',') or omit }}"
    home: "{{ user.home | default(omit) }}"
    shell: "{{ user.shell | default(users_shell) }}"
    update_password: "{{ user.update_password | default(omit) }}"
    expires: "{{ user.expires | default(omit) }}"
    system: "{{ user.system | default(omit) }}"
  register: users_manage_user

- name: user | Set sudo options for {{ user.name }}
  ansible.builtin.template:
    src: sudo.j2
    dest: '/etc/sudoers.d/{{ user.name | replace(".", "dot") }}'
    mode: "0640"
    validate: /usr/sbin/visudo --check --file %s
  when:
    - user.sudo_options is defined
  loop_control:
    label: "{{ user.name }}"

- name: user | Remove sudo options for {{ user.name }}
  ansible.builtin.file:
    path: '/etc/sudoers.d/{{ user.name | replace(".", "dot") }}'
    state: absent
  when:
    - user.sudo_options is not defined
  loop_control:
    label: "{{ user.name }}"

- name: user | Generate private ssh key for {{ user.name }}
  ansible.builtin.command:
    cmd: "{{ users_ssh_keygen_command }}"
    creates: "{{ users_ssh_key_directory }}/{{ user.name }}"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key
  loop_control:
    label: "{{ user.name }}"
  delegate_to: localhost
  become: false

- name: user | Generate public ssh key for {{ user.name }}
  ansible.builtin.shell:
    cmd: "{{ users_ssh_keygen_pubkey_command }} > {{ users_ssh_key_directory }}/{{ user.name }}.pub"
    creates: "{{ users_ssh_key_directory }}/{{ user.name }}.pub"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key
  loop_control:
    label: "{{ user.name }}"
  delegate_to: localhost
  become: false

- name: user | Convert ssh key to ppk for {{ user.name }}
  ansible.builtin.shell:
    cmd: >
      ssh-keygen -e -f "{{ users_ssh_key_directory }}/{{ user.name }}"
      -C "Generated by Ansible role robertdebock.users"
      > "{{ users_ssh_key_directory }}/{{ user.name }}.ppk"
    creates: "{{ users_ssh_key_directory }}/{{ user.name }}.ppk"
  when:
    - user.manage_ssh_key is defined
    - user.manage_ssh_key
  delegate_to: localhost
  become: false

- name: user | Get or set the home directory for {{ user.name }}
  block:
    - name: user | Get system users data for {{ user.name }}
      ansible.builtin.getent:
        database: passwd
        key: "{{ user.name }}"
        split: ":"

    - name: user | Set base home directory to {{ getent_passwd[user.name][4] | dirname }}
      ansible.builtin.set_fact:
        users_home_base_dir: "{{ getent_passwd[user.name][4] | dirname }}"

  rescue:
    - name: user | User not found, using /home
      ansible.builtin.set_fact:
        users_home_base_dir: "/home"

- name: user | Create .ssh directory for {{ user.name }}
  ansible.builtin.file:
    path: "{{ users_home_base_dir }}/{{ user.name }}/.ssh"
    state: directory
    mode: "0700"
  become: true
  become_user: "{{ user.name }}"
  when:
    - (user.manage_ssh_key is defined and user.manage_ssh_key)
      or user.private_keys is defined

- name: user | Deploy authorized keys for {{ user.name }}
  ansible.posix.authorized_key:
    user: "{{ user.name }}"
    exclusive: "{{ user.exclusive_keys|default(false) }}"
    state: present
    key: "{{ item }}"
  loop: "{{ user.authorized_keys }}"
  loop_control:
    label: "{{ user.name }}"
  when:
    - user.authorized_keys is defined

- name: user | Remove unauthorized keys for {{ user.name }}
  ansible.posix.authorized_key:
    user: "{{ user.name }}"
    state: absent
    key: "{{ item }}"
  loop: "{{ user.unauthorized_keys }}"
  loop_control:
    label: "{{ user.name }}"
  when:
    - user.unauthorized_keys is defined

- name: user | Copy generated private ssh key for {{ user.name }}
  ansible.builtin.copy:
    src: "{{ users_ssh_key_directory }}/{{ user.name }}"
    dest: "{{ users_home_base_dir }}/{{ user.name }}/.ssh/id_rsa"
    mode: "400"
    owner: "{{ user.name }}"
    group: "{{ user.group | default(omit) }}"
  when:
    - users_manage_user is defined
    - user.copy_private_key is defined
    - user.copy_private_key
  loop_control:
    label: "{{ user.name }}"

- name: user | Check users password valid time for {{ user.name }}
  ansible.builtin.command:
    cmd: 'awk ''BEGIN { FS = ":" } $1 == "{{ user.name }}" { print $5 }'' /etc/shadow'
  register: users_pw_valid
  changed_when: false
  check_mode: false
  when:
    - user.state is defined and user.state != "absent" or
      user.state is not defined

- name: user | Set users password valid time for {{ user.name }}
  ansible.builtin.command:
    cmd: chage -M "{{ user.password_validity_days }}" "{{ user.name }}"
  when:
    - user.password_validity_days is defined
    - users_pw_valid.stdout is defined
    - users_pw_valid.stdout | int !=  user.password_validity_days | int
  changed_when: true

- name: user | Place private key file for {{ user.name }}
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ users_home_base_dir }}/{{ user.name }}/.ssh/{{ item.name }}"
    mode: "400"
    owner: "{{ user.name }}"
    group: "{{ user.group | default(omit) }}"
  when:
    - user.private_keys is defined
  loop: "{{ user.private_keys }}"
  loop_control:
    label: "{{ item.name }}"
